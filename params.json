{"name":"Litegl.js","tagline":"Light Javascript WebGL library for handling Context, Meshes, Textures and Shaders. Relies on glMatrix 2.0","body":"litegl.js\r\n=========\r\n\r\nLitegl.js is a library that wraps WebGL to make it more user-friendly by creating classes for managing different items like Buffer, Mesh, Texture, Shader and other common aspects of any WebGL applications.\r\nIt is a fork from [LightGL.js](https://github.com/evanw/lightgl.js/) by [Evan Wallace](http://madebyevan.com), but some major changes have been made.\r\nSome of the main differences:\r\n\r\n * Matrices have been replaced by glMatrix\r\n * Meshes are forced to be stored in ArrayBuffer formats\r\n * Meshes support range rendering with offset\r\n * Removed fixed pipeline behaviour\r\n * Better event handling (mouse position, mouse wheel, dragging)\r\n * Textures expanded to support Arraybuffers and Cubemaps\r\n * Events system to trigger events from any object\r\n * Support for multiple WebGL contexts in the same page\r\n\r\nThis library has been used in several projects like [Rendeer.js](https://github.com/jagenjo/rendeer.js) or [Canvas2DtoWebGL](https://github.com/jagenjo/Canvas2DtoWebGL).</p>\r\n\r\n\r\nDemos\r\n-----\r\nDemos are included in the Examples folder but you can check them in [this website](http://tamats.com/webglstudio/litegl/#examples).\r\n\r\nUsage\r\n-----\r\n\r\nInclude the library and dependencies\r\n```html\r\n<script src=\"js/gl-matrix-min.js\"></script>\r\n<script src=\"js/litegl.js\"></script>\r\n```\r\n\r\nCreate the context\r\n```js\r\nvar gl = GL.create({width:800, height:600});\r\n```\r\n\r\nAttach to DOM\r\n```js\r\ndocument.getElementById(\"mycontainer\").appendChild( gl.canvas )\r\n```\r\n\r\nGet user input\r\n```js\r\ngl.captureMouse();\r\ngl.onmousedown = function(e) { ... }\r\n\r\ngl.captureKeys();\r\ngl.onkey = function(e) { ... }\r\n```\r\n\r\nCompile shader\r\n```js\r\nvar shader = new GL.Shader( vertex_shader_code, fragment_shader_code );\r\n```\r\n\r\nCreate Mesh\r\n```js\r\nvar mesh = new GL.Mesh({vertices:[-1,-1,0, 1,-1,0, 0,1,0], coords:[0,0, 1,0, 0.5,1]});\r\n```\r\n\r\nLoad a texture\r\n```js\r\nvar texture = GL.Texture.fromURL(\"image.jpg\", { minFilter: gl.LINEAR_MIPMAP_LINEAR });\r\n```\r\n\r\n\r\nRender\r\n```js\r\ngl.ondraw = function() {\r\n\ttexture.bind(0);\r\n\tvar my_uniforms = { u_texture: 0, u_color: [1,1,1,1] };\r\n\tshader.uniforms( my_uniforms ).draw( mesh );\r\n}\r\n\r\ngl.animate(); //calls the requestAnimFrame constantly, which will call ondraw\r\n```\r\n\r\n\r\nDocumentation\r\n-------------\r\nThe doc folder contains the documentation. For info about [http://glmatrix.com](glMatrix) check the documentation in its website.\r\n\r\nUtils\r\n-----\r\n\r\nIt includes several commands in the utils folder to generate doc, check errors and build minifyed version.\r\n\r\n\r\nFeedback\r\n--------\r\n\r\nYou can write any feedback to javi.agenjo@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}