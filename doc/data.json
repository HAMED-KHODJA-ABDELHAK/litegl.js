{
    "project": {},
    "files": {
        "../src/geo.js": {
            "name": "../src/geo.js",
            "modules": {},
            "classes": {
                "geo": 1,
                "BBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/gl-matrix-extra.js": {
            "name": "../src/gl-matrix-extra.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/litegl.js": {
            "name": "../src/litegl.js",
            "modules": {},
            "classes": {
                "GL": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/mesh.js": {
            "name": "../src/mesh.js",
            "modules": {},
            "classes": {
                "Indexer": 1,
                "Buffer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/octree.js": {
            "name": "../src/octree.js",
            "modules": {},
            "classes": {
                "Octree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/parsers.js": {
            "name": "../src/parsers.js",
            "modules": {},
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/shader.js": {
            "name": "../src/shader.js",
            "modules": {},
            "classes": {
                "Shader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/texture.js": {
            "name": "../src/texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils.js": {
            "name": "../src/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "geo": {
            "name": "geo",
            "shortname": "geo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/geo.js",
            "line": 6,
            "description": "Computational geometry algorithms, is a static calss"
        },
        "BBox": {
            "name": "BBox",
            "shortname": "BBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/geo.js",
            "line": 494,
            "description": "BBox is a class to create BoundingBoxes but it works as glMatrix, creating Float32Array with the info inside instead of objects\nThe bounding box is stored as center,halfsize,min,max,radius (total of 13 floats)"
        },
        "GL": {
            "name": "GL",
            "shortname": "GL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/litegl.js",
            "line": 3,
            "description": "The static module that contains all the features"
        },
        "Indexer": {
            "name": "Indexer",
            "shortname": "Indexer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/mesh.js",
            "line": 1,
            "description": "Indexer used to reuse vertices among a mesh",
            "is_constructor": 1
        },
        "Buffer": {
            "name": "Buffer",
            "shortname": "Buffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/mesh.js",
            "line": 22,
            "description": "A data buffer to be stored in the GPU",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "gl.ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data in typed-array format",
                    "type": "ArrayBufferView"
                },
                {
                    "name": "spacing",
                    "description": "number of numbers per component (3 per vertex, 2 per uvs...), default 3",
                    "type": "Number"
                },
                {
                    "name": "stream_type",
                    "description": "default gl.STATIC_DRAW (other: gl.DYNAMIC_DRAW, gl.STREAM_DRAW",
                    "type": "Enum"
                }
            ]
        },
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/parsers.js",
            "line": 2,
            "description": "A data buffer to be stored in the GPU",
            "params": [
                {
                    "name": "vertexBuffers",
                    "description": "object with all the vertex streams",
                    "type": "Object"
                },
                {
                    "name": "indexBuffers",
                    "description": "object with all the indices streams",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "itemtype": "method"
        },
        "Octree": {
            "name": "Octree",
            "shortname": "Octree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/octree.js",
            "line": 1,
            "description": "Octree generator for fast ray triangle collision with meshes\n\tDependencies: glmatrix.js (for vector and matrix operations)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mesh",
                    "description": "object containing vertices buffer (indices buffer optional)",
                    "type": "Mesh"
                }
            ]
        },
        "Shader": {
            "name": "Shader",
            "shortname": "Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/shader.js",
            "line": 1,
            "description": "Shader class to upload programs to the GPU",
            "is_constructor": 1,
            "params": [
                {
                    "name": "vertexSource",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fragmentSource",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "macros",
                    "description": "(optional) precompiler macros to be applied when compiling",
                    "type": "Object"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/texture.js",
            "line": 1,
            "description": "Texture class to upload images to the GPU, default is gl.TEXTURE_2D, gl.RGBAof gl.UNSIGNED_BYTE with filter gl.LINEAR, and gl.CLAMP_TO_EDGE\n\tThere is a list of options\n\t==========================\n\t- texture_type: gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP\n\t- format: gl.RGB, gl.RGBA, gl.DEPTH_COMPONENT\n\t- type: gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.HALF_FLOAT_OES, gl.FLOAT\n\t- filter: filtering for mag and min: gl.NEAREST or gl.LINEAR\n\t- magFilter: magnifying filter: gl.NEAREST, gl.LINEAR\n\t- minFilter: minifying filter: gl.NEAREST, gl.LINEAR, gl.LINEAR_MIPMAP_LINEAR\n\t- premultiply_alpha: multiplies alpha channel by every color channel\n\t- wrap: texture wrapping: gl.CLAMP_TO_EDGE, gl.REPEAT, gl.MIRROR",
            "params": [
                {
                    "name": "width",
                    "description": "texture width (any supported but Power of Two allows to have mipmaps), 0 means no memory reserved till its filled",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "texture height (any supported but Power of Two allows to have mipmaps), 0 means no memory reserved till its filled",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Check the list in the description",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "../src/geo.js",
            "line": 13,
            "description": "Returns a float4 containing the info about a plane with normal N and that passes through point P",
            "itemtype": "method",
            "name": "createPlane",
            "params": [
                {
                    "name": "P",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "N",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "plane values",
                "type": "Vec4"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 25,
            "description": "Computes the distance between the point and the plane",
            "itemtype": "method",
            "name": "distancePointToPlane",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "plane",
                    "description": "",
                    "type": "Vec4"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 37,
            "description": "Computes the square distance between the point and the plane",
            "itemtype": "method",
            "name": "distance2PointToPlane",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "plane",
                    "description": "",
                    "type": "Vec4"
                }
            ],
            "return": {
                "description": "distance*distance",
                "type": "Number"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 49,
            "description": "Projects point on plane",
            "itemtype": "method",
            "name": "projectPointOnPlane",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "P",
                    "description": "plane point",
                    "type": "Vec3"
                },
                {
                    "name": "N",
                    "description": "plane normal",
                    "type": "Vec3"
                },
                {
                    "name": "result",
                    "description": "to store result (optional)",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "projectec point",
                "type": "Vec3"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 66,
            "description": "Finds the reflected point over a plane (useful for reflecting camera position when rendering reflections)",
            "itemtype": "method",
            "name": "reflectPointInPlane",
            "params": [
                {
                    "name": "point",
                    "description": "point to reflect",
                    "type": "Vec3"
                },
                {
                    "name": "P",
                    "description": "point where the plane passes",
                    "type": "Vec3"
                },
                {
                    "name": "N",
                    "description": "normal of the plane",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "reflected point",
                "type": "Vec3"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 84,
            "description": "test a ray plane collision and retrieves the collision point",
            "itemtype": "method",
            "name": "testRayPlane",
            "params": [
                {
                    "name": "start",
                    "description": "ray start",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction",
                    "type": "Vec3"
                },
                {
                    "name": "P",
                    "description": "point where the plane passes",
                    "type": "Vec3"
                },
                {
                    "name": "N",
                    "description": "normal of the plane",
                    "type": "Vec3"
                },
                {
                    "name": "result",
                    "description": "collision position",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns if the ray collides the plane or the ray is parallel to the plane",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 108,
            "description": "test a ray sphere collision and retrieves the collision point",
            "itemtype": "method",
            "name": "testRaySphere",
            "params": [
                {
                    "name": "start",
                    "description": "ray start",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "center of the sphere",
                    "type": "Vec3"
                },
                {
                    "name": "radius",
                    "description": "radius of the sphere",
                    "type": "Number"
                },
                {
                    "name": "result",
                    "description": "collision position",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns if the ray collides the sphere",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 149,
            "description": "test a ray cylinder collision and retrieves the collision point",
            "itemtype": "method",
            "name": "testRaySphere",
            "params": [
                {
                    "name": "start",
                    "description": "ray start",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction",
                    "type": "Vec3"
                },
                {
                    "name": "p",
                    "description": "center of the cylinder",
                    "type": "Vec3"
                },
                {
                    "name": "q",
                    "description": "height of the cylinder",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "radius of the cylinder",
                    "type": "Number"
                },
                {
                    "name": "result",
                    "description": "collision position",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns if the ray collides the cylinder",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 235,
            "description": "test a ray bounding-box collision and retrieves the collision point, the BB must be Axis Aligned",
            "itemtype": "method",
            "name": "testRayBox",
            "params": [
                {
                    "name": "start",
                    "description": "ray start",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction",
                    "type": "Vec3"
                },
                {
                    "name": "minB",
                    "description": "minimum position of the bounding box",
                    "type": "Vec3"
                },
                {
                    "name": "maxB",
                    "description": "maximim position of the bounding box",
                    "type": "Vec3"
                },
                {
                    "name": "result",
                    "description": "collision position",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns if the ray collides the box",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 309,
            "description": "test a ray bounding-box collision, it uses the  BBox class and allows to use non-axis aligned bbox",
            "itemtype": "method",
            "name": "testRayBBox",
            "params": [
                {
                    "name": "start",
                    "description": "ray start",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction",
                    "type": "Vec3"
                },
                {
                    "name": "box",
                    "description": "in BBox format",
                    "type": "BBox"
                },
                {
                    "name": "model",
                    "description": "transformation of the BBox",
                    "type": "Mat4"
                },
                {
                    "name": "result",
                    "description": "collision position",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns if the ray collides the box",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 368,
            "description": "extract frustum planes given a view-projection matrix",
            "itemtype": "method",
            "name": "extractPlanes",
            "params": [
                {
                    "name": "viewprojection",
                    "description": "matrix",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "returns all 6 planes in a float32array[24]",
                "type": "Float32Array"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 417,
            "description": "test a BBox against the frustum",
            "itemtype": "method",
            "name": "frustumTestBox",
            "params": [
                {
                    "name": "planes",
                    "description": "frustum planes",
                    "type": "Float32Array"
                },
                {
                    "name": "boundindbox",
                    "description": "in BBox format",
                    "type": "BBox"
                }
            ],
            "return": {
                "description": "CLIP_INSIDE, CLIP_OVERLAP, CLIP_OUTSIDE",
                "type": "Number"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 444,
            "description": "test a Sphere against the frustum",
            "itemtype": "method",
            "name": "frustumTestSphere",
            "params": [
                {
                    "name": "center",
                    "description": "sphere center",
                    "type": "Vec3"
                },
                {
                    "name": "radius",
                    "description": "sphere radius",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CLIP_INSIDE, CLIP_OVERLAP, CLIP_OUTSIDE",
                "type": "Number"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 478,
            "description": "test if a 2d point is inside a 2d polygon",
            "itemtype": "method",
            "name": "testPoint2DInPolygon",
            "params": [
                {
                    "name": "poly",
                    "description": "array of 2d points",
                    "type": "Array"
                }
            ],
            "pt": "{vec2} point",
            "return": {
                "description": "true if it is inside",
                "type": "Boolean"
            },
            "class": "geo"
        },
        {
            "file": "../src/geo.js",
            "line": 508,
            "description": "create an empty bbox",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 518,
            "description": "create an bbox copy from another one",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 528,
            "description": "copy one bbox into another",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "out",
                    "description": "where to store the result",
                    "type": "BBox"
                },
                {
                    "name": "where",
                    "description": "to read the bbox",
                    "type": "BBox"
                }
            ],
            "return": {
                "description": "returns out",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 541,
            "description": "create a bbox from one point",
            "itemtype": "method",
            "name": "fromPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 556,
            "description": "create a bbox from min and max points",
            "itemtype": "method",
            "name": "fromMinMax",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 570,
            "description": "create a bbox from center and halfsize",
            "itemtype": "method",
            "name": "fromCenterHalfsize",
            "params": [
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "halfsize",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 584,
            "description": "create a bbox from a typed-array containing points",
            "itemtype": "method",
            "name": "fromPoints",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 597,
            "description": "set the values to a BB from a set of points",
            "itemtype": "method",
            "name": "setFromPoints",
            "params": [
                {
                    "name": "out",
                    "description": "where to store the result",
                    "type": "BBox"
                },
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "returns a float32array with the bbox",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 627,
            "description": "set the values to a BB from min and max",
            "itemtype": "method",
            "name": "setMinMax",
            "params": [
                {
                    "name": "out",
                    "description": "where to store the result",
                    "type": "BBox"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "returns out",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 653,
            "description": "set the values to a BB from center and halfsize",
            "itemtype": "method",
            "name": "setCenterHalfsize",
            "params": [
                {
                    "name": "out",
                    "description": "where to store the result",
                    "type": "BBox"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "radius",
                    "description": "[optional] (the minimum distance from the center to the further point)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns out",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/geo.js",
            "line": 680,
            "description": "Apply a matrix transformation to the BBox (applies to every corner and recomputes the BB)",
            "itemtype": "method",
            "name": "setCenterHalfsize",
            "params": [
                {
                    "name": "out",
                    "description": "where to store the result",
                    "type": "BBox"
                },
                {
                    "name": "bb",
                    "description": "bbox you want to transform",
                    "type": "BBox"
                },
                {
                    "name": "mat",
                    "description": "transformation",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "returns out",
                "type": "BBox"
            },
            "class": "BBox"
        },
        {
            "file": "../src/gl-matrix-extra.js",
            "line": 100,
            "class": "GL"
        },
        {
            "file": "../src/litegl.js",
            "line": 11,
            "description": "creates a new WebGL canvas",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "supported are: width, height",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gl context for webgl",
                "type": "Gl"
            },
            "class": "GL"
        },
        {
            "file": "../src/litegl.js",
            "line": 61,
            "description": "Tells the system to capture mouse events on the canvas. This will trigger onmousedown, onmousemove, onmouseup, onmousewheel callbacks in the canvas.",
            "itemtype": "method",
            "name": "gl.captureMouse",
            "params": [
                {
                    "name": "capture_wheel",
                    "description": "capture also the mouse wheel",
                    "type": "Boolean"
                }
            ],
            "class": "GL"
        },
        {
            "file": "../src/litegl.js",
            "line": 155,
            "description": "Tells the system to capture key events on the canvas. This will trigger onkey",
            "itemtype": "method",
            "name": "gl.captureKeys",
            "params": [
                {
                    "name": "prevent_default",
                    "description": "prevent default behaviour (like scroll on the web, etc)",
                    "type": "Boolean"
                }
            ],
            "class": "GL"
        },
        {
            "file": "../src/litegl.js",
            "line": 199,
            "description": "Tells the system to capture gamepad events on the canvas.",
            "itemtype": "method",
            "name": "gl.captureGamepads",
            "class": "GL"
        },
        {
            "file": "../src/litegl.js",
            "line": 218,
            "description": "returns the detected gamepads on the system",
            "itemtype": "method",
            "name": "gl.getGamepads",
            "class": "GL"
        },
        {
            "file": "../src/mesh.js",
            "line": 43,
            "description": "Uploads the buffer data (stored in this.data) to the GPU",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "stream_type",
                    "description": "default gl.STATIC_DRAW (other: gl.DYNAMIC_DRAW, gl.STREAM_DRAW",
                    "type": "Number"
                }
            ],
            "class": "Buffer"
        },
        {
            "file": "../src/mesh.js",
            "line": 105,
            "description": "Adds vertex and indices buffers to a mesh",
            "itemtype": "method",
            "name": "addBuffers",
            "params": [
                {
                    "name": "vertexBuffers",
                    "description": "object with all the vertex streams",
                    "type": "Object"
                },
                {
                    "name": "indexBuffers",
                    "description": "object with all the indices streams",
                    "type": "Object"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 184,
            "description": "Creates a new empty buffer and attachs it to this mesh",
            "itemtype": "method",
            "name": "addVertexBuffer",
            "params": [
                {
                    "name": "name",
                    "description": "\"vertices\",\"normals\"...",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "name of the stream in the shader \"a_vertex\",\"a_normal\",...",
                    "type": "String"
                },
                {
                    "name": "spacing",
                    "description": "components per vertex",
                    "type": "Number"
                },
                {
                    "name": "buffer_data",
                    "description": "the data in typed array format",
                    "type": "ArrayBufferView"
                },
                {
                    "name": "stream_type",
                    "description": "default gl.STATIC_DRAW (other: gl.DYNAMIC_DRAW, gl.STREAM_DRAW )",
                    "type": "Enum"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 216,
            "description": "Creates a new empty index buffer and attachs it to this mesh",
            "itemtype": "method",
            "name": "addIndexBuffer",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Typed array"
                },
                {
                    "name": "stream_type",
                    "description": "gl.STATIC_DRAW, gl.DYNAMIC_DRAW, gl.STREAM_DRAW",
                    "type": "Enum"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 231,
            "description": "Returns a vertex buffer",
            "itemtype": "method",
            "name": "getBuffer",
            "params": [
                {
                    "name": "name",
                    "description": "of vertex buffer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the buffer",
                "type": "Buffer"
            },
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 242,
            "description": "Returns a index buffer",
            "itemtype": "method",
            "name": "getIndexBuffer",
            "params": [
                {
                    "name": "name",
                    "description": "of index buffer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the buffer",
                "type": "Buffer"
            },
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 253,
            "description": "Uploads data of buffers to VRAM. Checks the buffers defined, and then search for a typed array with the same name in the mesh properties,\n\tit that is the case, it uploads the data to the buffer.",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "buffer_type",
                    "description": "gl.STATIC_DRAW, gl.DYNAMIC_DRAW, gl.STREAM_DRAW",
                    "type": "Number"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 273,
            "description": "Computes some data about the mesh",
            "itemtype": "method",
            "name": "generateMetadata",
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 345,
            "description": "Creates a new index stream with wireframe",
            "itemtype": "method",
            "name": "computeWireframe",
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 396,
            "description": "Creates a new stream with the tangents",
            "itemtype": "method",
            "name": "computeTangents",
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 485,
            "description": "Computes bounding information",
            "itemtype": "method",
            "name": "Mesh.computeBounding",
            "params": [
                {
                    "name": "vertices",
                    "description": "array containing all the vertices",
                    "type": "Typed Array"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 511,
            "description": "Update bounding information of this mesh",
            "itemtype": "method",
            "name": "updateBounding",
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 522,
            "description": "forces a bounding box to be set",
            "itemtype": "method",
            "name": "setBounding",
            "params": [
                {
                    "name": "center",
                    "description": "center of the bounding box",
                    "type": "Vec3"
                },
                {
                    "name": "half_size",
                    "description": "vector from the center to positive corner",
                    "type": "Vec3"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 533,
            "description": "Remove all local memory from the streams (leaving it only in the VRAM) to save RAM",
            "itemtype": "method",
            "name": "freeData",
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 575,
            "description": "Static method for the class Mesh to create a mesh from a list of common streams",
            "itemtype": "method",
            "name": "Mesh.load",
            "params": [
                {
                    "name": "buffers",
                    "description": "object will all the buffers",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "output_mesh",
                    "description": "optional mesh to store the mesh, otherwise is created",
                    "type": "Mesh"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 590,
            "description": "Returns a planar mesh (you can choose how many subdivisions)",
            "itemtype": "method",
            "name": "Mesh.plane",
            "params": [
                {
                    "name": "options",
                    "description": "valid options: detail, detailX, detailY, size, width, heigth, xz (horizontal plane)",
                    "type": "Object"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 642,
            "description": "Returns a cube mesh",
            "itemtype": "method",
            "name": "Mesh.cube",
            "params": [
                {
                    "name": "options",
                    "description": "valid options: size",
                    "type": "Object"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 668,
            "description": "Returns a cube mesh",
            "itemtype": "method",
            "name": "Mesh.cylinder",
            "params": [
                {
                    "name": "options",
                    "description": "valid options: radius, height, subdivisions",
                    "type": "Object"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 730,
            "description": "Returns a sphere mesh",
            "itemtype": "method",
            "name": "Mesh.sphere",
            "params": [
                {
                    "name": "options",
                    "description": "valid options: radius, lat, long",
                    "type": "Object"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/mesh.js",
            "line": 794,
            "description": "Returns a mesh with all the meshes merged",
            "itemtype": "method",
            "name": "Mesh.mergeMeshes",
            "params": [
                {
                    "name": "meshes",
                    "description": "array containing all the meshes",
                    "type": "Array"
                }
            ],
            "class": "Mesh"
        },
        {
            "file": "../src/octree.js",
            "line": 226,
            "description": "Uploads a set of uniforms to the Shader",
            "itemtype": "method",
            "name": "testRay",
            "params": [
                {
                    "name": "origin",
                    "description": "ray origin position",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "ray direction position",
                    "type": "Vec3"
                },
                {
                    "name": "dist_min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "dist_max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object containing pos and normal",
                "type": "HitTest"
            },
            "class": "Octree"
        },
        {
            "file": "../src/shader.js",
            "line": 44,
            "description": "Uploads a set of uniforms to the Shader",
            "itemtype": "method",
            "name": "uniforms",
            "params": [
                {
                    "name": "uniforms",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Shader"
        },
        {
            "file": "../src/shader.js",
            "line": 110,
            "description": "Renders a mesh using this shader, remember to use the function uniforms before to enable the shader",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "mesh",
                    "description": "",
                    "type": "Mesh"
                },
                {
                    "name": "mode",
                    "description": "could be gl.LINES, gl.POINTS, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN",
                    "type": "Number"
                }
            ],
            "class": "Shader"
        },
        {
            "file": "../src/shader.js",
            "line": 122,
            "description": "Renders a range of a mesh using this shader",
            "itemtype": "method",
            "name": "drawRange",
            "params": [
                {
                    "name": "mesh",
                    "description": "",
                    "type": "Mesh"
                },
                {
                    "name": "mode",
                    "description": "could be gl.LINES, gl.POINTS, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "first primitive to render",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "number of primitives to render",
                    "type": "Number"
                }
            ],
            "class": "Shader"
        },
        {
            "file": "../src/shader.js",
            "line": 137,
            "description": "Renders a range of a mesh using this shader",
            "itemtype": "method",
            "name": "drawBuffers",
            "params": [
                {
                    "name": "vertexBuffers",
                    "description": "an object containing all the buffers",
                    "type": "Object"
                },
                {
                    "name": "indexBuffer",
                    "description": "",
                    "type": "IndexBuffer"
                },
                {
                    "name": "mode",
                    "description": "could be gl.LINES, gl.POINTS, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN",
                    "type": "Number"
                },
                {
                    "name": "range_start",
                    "description": "first primitive to render",
                    "type": "Number"
                },
                {
                    "name": "range_length",
                    "description": "number of primitives to render",
                    "type": "Number"
                }
            ],
            "class": "Shader"
        },
        {
            "file": "../src/texture.js",
            "line": 78,
            "description": "Returns if depth texture is supported by the GPU",
            "itemtype": "method",
            "name": "isDepthSupported",
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 90,
            "description": "Binds the texture to one texture unit",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "unit",
                    "description": "texture unit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the texture unit",
                "type": "Number"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 103,
            "description": "Unbinds the texture",
            "itemtype": "method",
            "name": "unbind",
            "params": [
                {
                    "name": "unit",
                    "description": "texture unit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the texture unit",
                "type": "Number"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 120,
            "description": "Given an Image/Canvas/Video it uploads it to the GPU",
            "itemtype": "method",
            "name": "uploadImage",
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "Image"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 148,
            "description": "Uploads data to the GPU (data must have the appropiate size)",
            "itemtype": "method",
            "name": "uploadData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 163,
            "description": "Render to texture using FBO, just pass the callback to a rendering function and the content of the texture will be updated",
            "itemtype": "method",
            "name": "drawTo",
            "params": [
                {
                    "name": "callback",
                    "description": "function that does all the rendering inside this texture",
                    "type": "Function"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 203,
            "description": "Copy content of one texture into another",
            "itemtype": "method",
            "name": "copyTo",
            "params": [
                {
                    "name": "target_texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 227,
            "description": "Render texture in a quad to full viewport size",
            "itemtype": "method",
            "name": "toViewport",
            "params": [
                {
                    "name": "shader",
                    "description": "to apply, otherwise a default textured shader is applied",
                    "type": "Shader"
                },
                {
                    "name": "uniforms",
                    "description": "for the shader if needed",
                    "type": "Object"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 243,
            "description": "Copy texture content to a canvas",
            "itemtype": "method",
            "name": "toCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "must have the same size, if different the canvas will be resized",
                    "type": "Canvas"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 269,
            "description": "Similar to drawTo but it also stores the depth in a depth texture",
            "itemtype": "method",
            "name": "drawToColorAndDepth",
            "params": [
                {
                    "name": "color_texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "depth_texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 298,
            "description": "Loads and uploads a texture from a url",
            "itemtype": "method",
            "name": "Texture.fromURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 344,
            "description": "Create a texture from an Image",
            "itemtype": "method",
            "name": "Texture.fromImage",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 367,
            "description": "Create a texture from a Video",
            "itemtype": "method",
            "name": "Texture.fromVideo",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 390,
            "description": "Create a clone of a texture",
            "itemtype": "method",
            "name": "Texture.fromTexture",
            "params": [
                {
                    "name": "old_texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 404,
            "description": "Create a texture from an ArrayBuffer containing the pixels",
            "itemtype": "method",
            "name": "Texture.fromTexture",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pixels",
                    "description": "",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 441,
            "description": "Create a cubemap texture from a set of 6 images",
            "itemtype": "method",
            "name": "Texture.cubemapFromImages",
            "params": [
                {
                    "name": "images",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 477,
            "description": "Create a cubemap texture from a single image that contains all six images arranged vertically",
            "itemtype": "method",
            "name": "Texture.cubemapFromImage",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the texture",
                "type": "Texture"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 507,
            "description": "returns a Blob containing all the data from the texture",
            "itemtype": "method",
            "name": "Texture.toBlob",
            "return": {
                "description": "the blob containing the data",
                "type": "Blob"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 543,
            "description": "returns a base64 String containing all the data from the texture",
            "itemtype": "method",
            "name": "Texture.toBase64",
            "return": {
                "description": "the data in base64 format",
                "type": "String"
            },
            "class": "Texture"
        },
        {
            "file": "../src/texture.js",
            "line": 571,
            "description": "generates some basic metadata about the image",
            "itemtype": "method",
            "name": "generateMetadata",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Texture"
        },
        {
            "file": "../src/utils.js",
            "line": 9,
            "description": "Tells if one number is power of two (used for textures)",
            "itemtype": "method",
            "name": "isPowerOfTwo",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "V"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "../src/utils.js",
            "line": 20,
            "description": "Get current time in milliseconds",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: pt",
            "line": " ../src/geo.js:478"
        },
        {
            "message": "Missing item type",
            "line": " ../src/gl-matrix-extra.js:100"
        }
    ]
}